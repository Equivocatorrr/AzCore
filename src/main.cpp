/*
    File: main.cpp
    Author: Philip Haynes
    Description: High-level definition of the structure of our program.
*/

#include "io.hpp"

const u8 mapKeyCodeToEvdev[256] = {
0xff,   0xff,   0xff,   0xff,   0x26,   0x38,   0x36,   0x28,   // 0x00
0x1a,   0x29,   0x2a,   0x2b,   0x1f,   0x2c,   0x2d,   0x2e,   // 0x08
0x3a,   0x39,   0x20,   0x21,   0x18,   0x1b,   0x27,   0x1c,   // 0x10
0x1e,   0x37,   0x19,   0x35,   0x1d,   0x34,   0x0a,   0x0b,   // 0x18
0x0c,   0x0d,   0x0e,   0x0f,   0x10,   0x11,   0x12,   0x13,   // 0x20
0x24,   0x09,   0x16,   0x17,   0x41,   0x14,   0x15,   0x22,   // 0x28
0x23,   0x33,   0xff,   0x2f,   0x30,   0x31,   0x3b,   0x3c,   // 0x30
0x3d,   0x42,   0x43,   0x44,   0x45,   0x46,   0x47,   0x48,   // 0x38
0x49,   0x4a,   0x4b,   0x4c,   0x5f,   0x60,   0x6b,   0x4e,   // 0x40
0x7f,   0x76,   0x6e,   0x70,   0x77,   0x73,   0x75,   0x72,   // 0x48
0x71,   0x74,   0x6f,   0x4d,   0x6a,   0x3f,   0x52,   0x56,   // 0x50
0x68,   0x57,   0x58,   0x59,   0x53,   0x54,   0x55,   0x4f,   // 0x58
0x50,   0x51,   0x5a,   0x5b,   0x5e,   0x87,   0x7c,   0x7d,   // 0x60
0xbf,   0xc0,   0xc1,   0xc2,   0xc3,   0xc4,   0xc5,   0xc6,   // 0x68
0xc7,   0xc8,   0xc9,   0xca,   0x8e,   0x92,   0x8a,   0x8c,   // 0x70
0x88,   0x89,   0x8b,   0x91,   0x8d,   0x8f,   0x90,   0x79,   // 0x78
0x7b,   0x7a,   0xff,   0xff,   0xff,   0x81,   0xff,   0x61,   // 0x80
0x65,   0x84,   0x64,   0x66,   0x67,   0xff,   0xff,   0xff,   // 0x88
0x82,   0x83,   0x62,   0x63,   0x5d,   0xff,   0xff,   0xff,   // 0x90
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x98
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xa0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xa8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xbb,   0xbc,   // 0xb0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xb8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xc0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xc8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xd0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xd8
0x25,   0x32,   0x40,   0x85,   0x69,   0x3e,   0x6c,   0x86,   // 0xe0
0xac,   0xae,   0xad,   0xab,   0xa9,   0x7b,   0x7a,   0x79,   // 0xe8
0xb4,   0xa6,   0xa7,   0x88,   0x90,   0xb9,   0xba,   0xb8,   // 0xf0
0x96,   0xa0,   0xb5,   0x94,   0xa3,   0x98,   0xff,   0xff    // 0xf8
};

const u8 mapKeyCodeToWinVK[256] = {
0xff,   0xff,   0xff,   0xff,   0x41,   0x42,   0x43,   0x44,   // 0x00
0x45,   0x46,   0x47,   0x48,   0x49,   0x4a,   0x4b,   0x4c,   // 0x08
0x4d,   0x4e,   0x4f,   0x50,   0x51,   0x52,   0x53,   0x54,   // 0x10
0x55,   0x56,   0x57,   0x58,   0x59,   0x5a,   0x31,   0x32,   // 0x18
0x33,   0x34,   0x35,   0x36,   0x37,   0x38,   0x39,   0x30,   // 0x20
0x0d,   0x1b,   0x08,   0x09,   0x20,   0xbd,   0xbb,   0xdb,   // 0x28
0xdd,   0xdc,   0xff,   0xba,   0xde,   0xc0,   0xbc,   0xbe,   // 0x30
0xbf,   0x14,   0x70,   0x71,   0x72,   0x73,   0x74,   0x75,   // 0x38
0x76,   0x77,   0x78,   0x79,   0x7a,   0x7b,   0x2c,   0x91,   // 0x40
0x13,   0x2d,   0x24,   0x21,   0x2e,   0x23,   0x22,   0x27,   // 0x48
0x25,   0x28,   0x26,   0x90,   0x6f,   0x6a,   0x6d,   0x6b,   // 0x50
0xff,   0x61,   0x62,   0x63,   0x64,   0x65,   0x66,   0x67,   // 0x58
0x68,   0x69,   0x60,   0x6e,   0xff,   0xff,   0xff,   0xff,   // 0x60
0x7c,   0x7d,   0x7e,   0x7f,   0x80,   0x81,   0x82,   0x83,   // 0x68
0x84,   0x85,   0x86,   0x87,   0xff,   0xff,   0xff,   0xff,   // 0x70
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x78
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x80
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x88
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x90
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x98
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xa0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xa8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xb0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xb8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xc0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xc8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xd0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xd8
0x11,   0x10,   0x12,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xe0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xe8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xf0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff    // 0xf8
};

const u8 mapKeyCodeToWinScan[256] = {
0xff,   0xff,   0xff,   0xff,   0x1e,   0x30,   0x2e,   0x20,   // 0x00
0x12,   0x21,   0x22,   0x23,   0x17,   0x24,   0x25,   0x26,   // 0x08
0x32,   0x31,   0x18,   0x19,   0x10,   0x13,   0x1f,   0x14,   // 0x10
0x16,   0x2f,   0x11,   0x2d,   0x15,   0x2c,   0x02,   0x03,   // 0x18
0x04,   0x05,   0x06,   0x07,   0x08,   0x09,   0x0a,   0x0b,   // 0x20
0x1c,   0x01,   0x0e,   0x0f,   0x39,   0x0c,   0x0d,   0x1a,   // 0x28
0x1b,   0x2b,   0xff,   0x27,   0x28,   0x29,   0x33,   0x34,   // 0x30
0x35,   0x3a,   0x3b,   0x3c,   0x3d,   0x3e,   0x3f,   0x40,   // 0x38
0x41,   0x42,   0x43,   0x44,   0x57,   0x58,   0x37,   0x46,   // 0x40
0x45,   0x52,   0x47,   0x49,   0x53,   0x4f,   0x51,   0x4d,   // 0x48
0x4b,   0x50,   0x48,   0x45,   0x35,   0x37,   0x4a,   0x4e,   // 0x50
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x58
0xff,   0xff,   0xff,   0x53,   0xff,   0xff,   0xff,   0xff,   // 0x60
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x68
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x70
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x78
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x80
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x88
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x90
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0x98
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xa0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xa8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xb0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xb8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xc0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xc8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xd0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xd8
0x1d,   0x2a,   0x38,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xe0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xe8
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   // 0xf0
0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff    // 0xf8
};

void PrintKeyCodeMap(const u8* map, const char* name, const char* inverseName, io::logStream& cout) {
    cout << "\nconst u8 " << name << "[256] = {\n";
    for (u16 i = 0; i < 256; i++) {
        cout << "0x";
        u32 digit1 = map[i]/16;
        u32 digit2 = map[i]%16;
        if (digit1 < 10)
            cout << char(digit1+'0');
        else
            cout << char(digit1-10+'a');
        if (digit2 < 10)
            cout << char(digit2+'0');
        else
            cout << char(digit2-10+'a');
        if (i != 255)
            cout << ",   ";
        if (i%8 == 7)
            cout << "\n";
    }
    cout << "};\n" << std::endl;
    cout << "\nconst u8 " << inverseName << "[256] = {\n";
    for (u16 i = 0; i < 256; i++) {
        u8 toPrint = 255;
        for (u16 j = 0; j < 256 && toPrint == 255; j++) {
            if (i == map[j]) {
                toPrint = j;
            }
        }
        cout << "0x";
        u32 digit1 = toPrint/16;
        u32 digit2 = toPrint%16;
        if (digit1 < 10)
            cout << char(digit1+'0');
        else
            cout << char(digit1-10+'a');
        if (digit2 < 10)
            cout << char(digit2+'0');
        else
            cout << char(digit2-10+'a');
        if (i != 255)
            cout << ",   ";
        if (i%8 == 7)
            cout << "\n";
    }
    cout << "};\n" << std::endl;
}

i32 main(i32 argumentCount, char** argumentValues) {
    io::logStream cout("test.log");

    cout << "\nTest program.\n\tReceived " << argumentCount << " arguments:\n";
    for (i32 i = 0; i < argumentCount; i++) {
        cout << i << ": " << argumentValues[i] << std::endl;
    }

    PrintKeyCodeMap(mapKeyCodeToEvdev, "mapKeyCodeToEvdev", "mapKeyCodeFromEvdev", cout);
    PrintKeyCodeMap(mapKeyCodeToWinVK, "mapKeyCodeToWinVK", "mapKeyCodeFromWinVK", cout);
    PrintKeyCodeMap(mapKeyCodeToWinScan, "mapKeyCodeToWinScan", "mapKeyCodeFromWinScan", cout);

    io::Window window;
    io::Input input;
    window.input = &input;
    window.name = "Engine Test";
    if (!window.Open()) {
        cout << "Failed to open Window: " << io::error << std::endl;
        return 1;
    }
    if(!window.Show()) {
        cout << "Failed to show Window: " << io::error << std::endl;
        return 1;
    }
    do {
        if (input.Any.Pressed()) {
            cout << "Pressed HID " << std::hex << (u32)input.codeAny << std::endl;
            cout << "\t" << window.InputName(input.codeAny) << std::endl;
        }
        if (input.Any.Released()) {
            cout << "Released  HID " << std::hex << (u32)input.codeAny << std::endl;
            cout << "\t" << window.InputName(input.codeAny) << std::endl;
        }
        input.Tick(1.0/60.0);
    } while (window.Update());
    cout << "Last io::error was \"" << io::error << "\"" << std::endl;
    if (!window.Close()) {
        cout << "Failed to close Window: " << io::error << std::endl;
        return 1;
    }

    return 0;
}
